definitions:
  dto.TokenPair:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: c29tZS1iYXNlNjQtcmVmcmVzaC10b2tlbg==
        type: string
    type: object
  dto.UserId:
    properties:
      user_id:
        example: "12345"
        type: string
    type: object
  handlers.HTTPError:
    properties:
      code:
        example: EXAMPLE_ERROR_CODE
        type: string
      message:
        example: example error message
        type: string
    type: object
info:
  contact: {}
  title: Authentication-Service API
  version: "1.0"
paths:
  /login:
    post:
      description: Returns token pair (access + refresh) for user id (GUID)
      parameters:
      - example: "12345"
        in: query
        name: user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenPair'
        "401":
          description: INVALID_QUERY_PARAMS
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "500":
          description: INTERNAL_SERVER_ERROR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
      summary: Get token pair
      tags:
      - auth
  /logout:
    post:
      description: Invalidate tokens
      parameters:
      - description: tokens to invalidate
        in: body
        name: tokens
        required: true
        schema:
          $ref: '#/definitions/dto.TokenPair'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: INVALID_JSON_BODY, TOKENS_NOT_PAIR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "401":
          description: TOKEN_EXPIRED, TOKEN_INVALID, TOKEN_BLACKLISTED
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "404":
          description: TOKEN_NOT_FOUND
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "409":
          description: TOKEN_ALREADY_USED
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "500":
          description: INTERNAL_SERVER_ERROR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
      summary: Logout user
      tags:
      - auth
  /tokens/refresh:
    put:
      description: Returns updated token pair (access + refresh)
      parameters:
      - description: tokens to update
        in: body
        name: tokens
        required: true
        schema:
          $ref: '#/definitions/dto.TokenPair'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenPair'
        "400":
          description: INVALID_JSON_BODY, TOKENS_NOT_PAIR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "401":
          description: TOKEN_INVALID, DIFFERENT_USER_AGENT
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "404":
          description: TOKEN_NOT_FOUND
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "409":
          description: TOKEN_ALREADY_USED
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "500":
          description: INTERNAL_SERVER_ERROR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
      summary: Update token pair
      tags:
      - auth
  /users/guid:
    get:
      description: Returns users id (GUID)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserId'
        "401":
          description: TOKEN_INVALID, TOKEN_EXPIRED, TOKEN_BLACKLISTED
          schema:
            $ref: '#/definitions/handlers.HTTPError'
        "500":
          description: INTERNAL_SERVER_ERROR
          schema:
            $ref: '#/definitions/handlers.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user id
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
